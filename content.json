{"meta":{"title":"Unconsciously","subtitle":"懒散人一枚是也~~~","description":"木事敲敲代码看看电影喝喝小茶~~~","author":"CACAMO","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2016-12-05T06:51:42.356Z","updated":"2016-12-05T06:51:42.356Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"project","date":"2016-12-05T06:54:03.858Z","updated":"2016-12-05T06:54:03.858Z","comments":false,"path":"project/index.html","permalink":"http://yoursite.com/project/index.html","excerpt":"","text":""},{"title":"search","date":"2016-12-05T06:55:03.332Z","updated":"2016-12-05T06:55:03.332Z","comments":false,"path":"search/index.html","permalink":"http://yoursite.com/search/index.html","excerpt":"","text":""},{"title":"css","date":"2016-12-05T06:56:39.000Z","updated":"2016-12-05T06:56:39.905Z","comments":true,"path":"css/index.html","permalink":"http://yoursite.com/css/index.html","excerpt":"","text":""},{"title":"","date":"2016-12-05T07:02:34.312Z","updated":"2016-12-05T07:02:34.312Z","comments":true,"path":"css/mystyle.css","permalink":"http://yoursite.com/css/mystyle.css","excerpt":"","text":"@font-face { font-family: \"Meiryo\"; src: url(\"/fonts/Meiryo.eot\"); /* IE9 */ src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */ url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */ url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */ url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\"); /* iOS 4.1- */ font-style: normal; font-weight: normal; } html.page-home { /*background-image: url('/images/bg.jpg')*/ background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent); background-blend-mode: screen; /*background: linear-gradient(to left, #5f2c82, #49a09d);*/ }"},{"title":"Categories","date":"2013-03-11T15:00:24.000Z","updated":"2016-12-06T00:52:38.256Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2013-03-11T15:03:24.000Z","updated":"2016-12-06T00:53:20.703Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"link","date":"2016-12-05T07:34:08.302Z","updated":"2016-12-05T07:34:08.302Z","comments":false,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""}],"posts":[{"title":"CSS3-02 动画","slug":"CSS3/CSS3动画效果","date":"2015-07-17T12:30:10.000Z","updated":"2016-12-06T06:17:08.464Z","comments":true,"path":"2015/07/17/CSS3/CSS3动画效果/","link":"","permalink":"http://yoursite.com/2015/07/17/CSS3/CSS3动画效果/","excerpt":"2D/3D转换 | 过渡动画transition | 关键帧动画-起始动画移动端中CSS3动画兼容性：webkit[安卓|苹果|欧朋12.0 -80%]、ie[9.0后-标准浏览器]、厂商自家[X5-基于webkit] 关键帧动画：第三方动画库：animate.css","text":"2D/3D转换 | 过渡动画transition | 关键帧动画-起始动画移动端中CSS3动画兼容性：webkit[安卓|苹果|欧朋12.0 -80%]、ie[9.0后-标准浏览器]、厂商自家[X5-基于webkit] 关键帧动画：第三方动画库：animate.css 2D/3D转换：让某个元素改变形状,大小和位置来实现转换：移动，比例化，反过来，旋转，和拉伸元素:变换后其在dom树上的盒模型仍然在起始位置!!! 2D转换方法：默认变换中心-中心点 translate():根据左(X轴)和顶部(Y轴)位置给定的参数，从==当前元素位置==移动-位移 translateX|translateY | transform: translate(50px,100px); rotate():在一个给定度数顺时针旋转的元素。负值是允许的，这样是元素逆时针旋转-==旋转[绕中心点]==:transform: rotate(30deg); scale():该元素增加或减少的大小，取决于宽度（X轴）和高度（Y轴）的参数-==缩放[宽高]== scaleX|scaleY | transform: scale(2,3); skew()：该元素会根据横向（X轴）和垂直（Y轴）线参数给定角度-==倾斜==skewX(45deg)|skewY(45deg) | transform: skew(30deg,20deg); matrix()：该方法有六个参数，包含旋转，缩放，移动（平移）和倾斜功能-合并2D变换：transform:matrix(0.866,0.5,-0.5,0.866,0,0); 设置原点：变换中心：transform-origin：left top;会影响 旋转|缩放 所围绕的点12345678910111213141516171819202122//变形原点：控制2D变换时围绕的原点默认transform-origin：center center;div&#123; transition: all 3s; transform-origin：left top;&#125;div:hover&#123; transform: translate(50px,100px); //translateY会覆盖translateX transform: translateX(50px); transform: translateY(50px); transform: rotate(30deg); transform: scale(2,3); transform: skew(30deg,20deg); transform:matrix(0.866,0.5,-0.5,0.866,0,0); //同时让多个样式配置到一个transform中，避免被覆盖： transform: rotate(30deg) scale(2) skew(45deg);&#125; 3D转换：左手螺旋定则：x右 y下 z外 rotateX|rotateY|rotateZ(45deg);而直接写translateZ没有效果，需要开启3D相关设置： 直接写translateZ没有效果，需要开启3D相关设置：transform-style:preserve-3d;注意：该3d声明应用在3D变化的兄弟元素们的==父元素[舞台元素]== 上 translate3D(参数tx||ty||tz)：X|Y|Z轴的位移 rotate3D(参数x||y||zdeg): 围绕X|Y|Z轴旋转的矢量值：正-顺||负-逆时针[左手定则] scale3D(参数sx||sy||sz): X|Y|Z轴的缩放比例 1234scale3d(x,y,z);rotate3d(x,y,z,angle);-webkit-transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg); 过渡动画transition：从起始-终止状态，回返含动画效果 21234567transition-property: 过渡属性transition-duration: 过渡时间transition-timing-function:过渡时间函数(动画效果) ：easy由慢到快||linear匀速变化||easy-in/out慢速开始/结束|| easy-in-out慢速开始并结束||cubic-bezier(n,n,n,n) [贝塞尔曲线](http://cubic-bezier.com/#.17,.67,.83,.67)transition-delay: 延迟执行时间 关键帧动画-起始动画：从起始-终止状态，回返无动画效果 1 定义关键帧动画：keyframes(关键帧动画)：webkit内核的浏览器(Safari|Chrome)前缀：关键词 “from” 和 “to”，等同于 0% 和 100%(参照动画时间); 调用并配置关键帧动画：animation：无严格顺序要求，但尽量按照一定顺序： 配置动画名称：animation-name: 动画名称;【必选】 配置动画执行时间：animation-duration: 7s;【必选】 配置动画执行次数：number/infinite(无限次):animation-iteration-count: 6; 配置动画执行方向：normal(默认)|reverse(反向)|alternate(1正向2反向)|alternate-reverse(1反向2正向):animation-direction: alternate; 配置动画执行的延迟时间：animation-delay: 3s; 配置动画执行时间函数(动画执行速率-效果)：animation-timimg-function：ease; 注意:当用 @keyframes 1）创建动画时，要把它==绑定到一个选择器上==，否则动画不会有任何效果； 2）必须定义==动画的名称和动画的持续时间==。如果省略的持续时间，动画将无法运行，因为默认值是01234567891011121314151617181920212223242526272829//定义动画函数dong：@-webkit-keyframes dong &#123; //为webkit内核浏览器配置兼容前缀 from &#123;left: 0;&#125; to &#123;left: 700px;&#125;&#125;@keyframes dong &#123; //百分比切分的是动画总时间 //动画起始位置： 0% &#123;left: 0;&#125; 50% &#123;left: 700px;&#125; //动画结束位置 100% &#123;left: 0;&#125;&#125;//把‘dong’ 动画捆绑到div1 元素上：#div1&#123; animation-name: dong; animation-duration: 3s; //动画无限次执行： animation-iteration-count: infinite; animation-direction: alternate-reverse; animation-delay: 3s; animation-timimg-function: easy-out; //简写形式： animation: dong 5s linear 2s infinite alternate;&#125; animate.css:可以通过animation属性设置相关关键帧动画12345678910111213141516171819202122232425#div1:hover&#123; background-color: yellow; animation: bounce 3s;&#125;//选择器：div.bounce(动画名称) div.animated(动画时间) 所有入场动画 Bug ---用户触发：闪：在同一事件中对同一选择器 移除-添加 属性时, jquery自动优化代码【代码预加载即分析代码-直接执行】：不移除只闪动1下作为提示： 解决：在另一个并存事件中移除 1手动在第三方库中改正：在from中手动在样式中[淡出时]改为display：none; 2添加并存事件，并进行移除操作 //引入方法1 //3.1jquery中webkit中mouseover有bug--则换个同类型事件： $(&apos;#div1&apos;).on(&apos;mousemove&apos;, function()&#123; this.style.animation = &apos;bounceIn 3s&apos;; &#125;).on(&apos;mouseover&apos;, function()&#123; this.style.animation = &apos;&apos;; &#125;); //引入方法2 //3.1jquery中webkit中mouseup有bug--则换个同类型事件：mousedown $(&apos;#div2&apos;).on(&apos;click&apos;, function()&#123; $(this).addClass(&apos;bounce animated&apos;); &#125;).on(&apos;mouseup&apos;, function()&#123; $(this).removeClass(&apos;bounce animated&apos;); &#125;);","categories":[{"name":"CSS3","slug":"CSS3","permalink":"http://yoursite.com/categories/CSS3/"}],"tags":[{"name":"CSS3","slug":"CSS3","permalink":"http://yoursite.com/tags/CSS3/"},{"name":"CSS3动画","slug":"CSS3动画","permalink":"http://yoursite.com/tags/CSS3动画/"}]},{"title":"CSS3-01 背景和边框相关属性","slug":"CSS3/精彩绝伦的CSS3","date":"2015-07-17T00:30:10.000Z","updated":"2016-12-06T06:15:59.092Z","comments":true,"path":"2015/07/17/CSS3/精彩绝伦的CSS3/","link":"","permalink":"http://yoursite.com/2015/07/17/CSS3/精彩绝伦的CSS3/","excerpt":"背景和边框CSS绘制各种集合图形CSS绘制26个英文字母 背景和边框： border-radius：创建圆角： 四个值: 第一个值为左上角，第二个值为右上角，第三个值为右下角，第四个值为左下角。 三个值: 第一个值为左上角, 第二个值为右上角和左下角，第三个值为右下角 两个值: 第一个值为左上角与右下角，第二个值为右上角与左下角 一个值： 四个圆角值相同","text":"背景和边框CSS绘制各种集合图形CSS绘制26个英文字母 背景和边框： border-radius：创建圆角： 四个值: 第一个值为左上角，第二个值为右上角，第三个值为右下角，第四个值为左下角。 三个值: 第一个值为左上角, 第二个值为右上角和左下角，第三个值为右下角 两个值: 第一个值为左上角与右下角，第二个值为右上角与左下角 一个值： 四个圆角值相同 box-shadow：盒阴影：第一个值表示在x轴上的投影尺寸，正值表示向右投影，负值表示向左投影；第二个值表示在y轴上的投影尺寸，正值表示向下投影，负值表示向上投影；第三个值表示阴影渲染的范围。数值越大，阴影越淡；第四个值表示阴影的颜色 background-origin：设置图片展示的起始位置：可以从边框border-box、内边距padding-box、content的左上角content-box 开始渲染图片。从渲染起始位置开始展示图片，一直到图片展示结束位置位置，如果没有关闭平铺，则空白位置平铺填满，如果关闭了平铺，则空白保留 background-size：指定背景图片大小：相对于父元素的宽度和高度的百分比的大小 background-clip：背景剪裁属性：从指定位置开始绘制，边框border-box、内边距padding-box、content的左上角content-box background：background-image background-position(右下左上) background-repeat 123456789101112131415161718192021222324252627282930 //border-radius: 10px 20px 30px 40px; //绘制吃豆豆 border-top: 100px solid black; border-right: 100px solid transparent; border-bottom: 100px solid yellow; border-left: 100px solid green; border-radius: 50%; //box-shadow: x y r color; //叠加渲染：加深颜色 box-shadow: 10px 10px 20px gray, 5px 5px 10px gray, 10px 10px 15px gray, 15px 15px 20px gray; //边框阴影的渲染位置：inset表示向边框以内渲染，outset表示向边框以外渲染 box-shadow: 10px -10px 20px gray inset; //文字阴影： text-shadow: 0px 0px 1px red, 0px 0px 3px red, 0px 0px 6px red;color: #fff;//为了保证缩放后图片不变形，只把表示背景图片的宽度设置为指定的值，而高度会缩放成对应的尺寸 background-size:100%; background-origin: content-box; background-clip: content-box; background: url(img_flwr.gif) right bottom no-repeat, url(paper.gif) left top repeat; CSS3渐变(gradients)：必须使用图像来实现这些效果:在2个或多个指定颜色之间显示平稳过度 线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向(默认从上到下) 径向渐变（Radial Gradients）- 由它们的中心定义：指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落） 123456789101112131415161718192021222324252627282930//线性渐变：background: linear-gradient(direction, color-stop1, color-stop2, ...);//线性渐变 - 从上到下background: linear-gradient(red, green, blue);//线性渐变 - 从左到右background: linear-gradient(to right, red , blue);//线性渐变 - 对角background: linear-gradient(to bottom right, red , blue);//线性渐变：使用角度 background: linear-gradient(angle, color-stop1, color-stop2);//180deg:上-下 90deg:左-右background: linear-gradient(180deg, red, blue);//线性渐变 - 使用透明度：减弱变淡的效果 0-完全透明 1-完全不透明background: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1));//线性渐变 - 重复的线性渐变background: repeating-linear-gradient(red, yellow 10%, green 20%);//径向渐变：background: radial-gradient(center, shape size, start-color, ..., last-color);//径向渐变 - 颜色结点均匀分布（默认情况下）background: radial-gradient(red, green, blue);//径向渐变 - 颜色结点不均匀分布background: radial-gradient(red 5%, green 15%, blue 60%);//径向渐变 - 设置形状：circle||ellipse(默认)background: radial-gradient(circle, red, yellow, green);//径向渐变 - 不同尺寸大小：closest-side||farthest-side||closest-corner||farthest-cornerbackground: radial-gradient(60% 55%, closest-side,blue,green,yellow,black);//径向渐变 - 重复的径向渐变background: repeating-radial-gradient(red, yellow 10%, green 15%);//彩虹条background: linear-gradient(to right, red,orange,yellow,green,blue,indigo,violet); text-shadow：x, y, blur, color 其中，blur为模糊的距离 color为阴影颜色，text-shadow属性连接一个或更多的阴影文本。属性是阴影，指定的每2或3个长度值和一个可选的颜色值用逗号分隔开来。已失时效的长度为0 word-wrap：英文单词换行：normal || break-word 强制换行 框模型box-sizing：box-sizing: content-box(元素宽高只含content)|border-box(元素宽高还含border和padding)|inherit(继承于父元素); 12//text-shadow: h-shadow v-shadow blur color; text-shadow:0 0 3px #FF0000;","categories":[{"name":"CSS3","slug":"CSS3","permalink":"http://yoursite.com/categories/CSS3/"}],"tags":[{"name":"CSS3","slug":"CSS3","permalink":"http://yoursite.com/tags/CSS3/"},{"name":"border","slug":"border","permalink":"http://yoursite.com/tags/border/"}]},{"title":"CSS页面重构/优化之行高","slug":"页面重构与优化.html/CSS行高line-height和文本、图片的垂直居中","date":"2015-05-13T12:30:10.000Z","updated":"2016-12-06T06:13:45.597Z","comments":true,"path":"2015/05/13/页面重构与优化.html/CSS行高line-height和文本、图片的垂直居中/","link":"","permalink":"http://yoursite.com/2015/05/13/页面重构与优化.html/CSS行高line-height和文本、图片的垂直居中/","excerpt":"行高：具体来说是指两行文字间基线之间的距离。垂直方向上：vertical-align属性：top,middle,baseline,bottom line-height与line boxes： 有一空div，如果没有设置至少大于1像素高度height值时，该div的高度就是0；如果该div里面写入一个空格或文字，则此div就会有一个高度。那么您思考过没有，为什么div里面有文字后就会有高度呢？","text":"行高：具体来说是指两行文字间基线之间的距离。垂直方向上：vertical-align属性：top,middle,baseline,bottom line-height与line boxes： 有一空div，如果没有设置至少大于1像素高度height值时，该div的高度就是0；如果该div里面写入一个空格或文字，则此div就会有一个高度。那么您思考过没有，为什么div里面有文字后就会有高度呢？ 测试：1234567css代码：.test1&#123;font-size:20px; line-height:0; border:1px solid #cccccc; background:#eeeeee;&#125;.test2&#123;font-size:0; line-height:20px; border:1px solid #cccccc; background:#eeeeee;&#125;html代码：&lt;div class=&quot;test1&quot;&gt;测试&lt;/div&gt;&lt;div class=&quot;test2&quot;&gt;测试&lt;/div&gt; 测试结果：div.test1 ：div高度为0;div.test2 ：div高度为lline-height; ——说明撑开div高度的是line-height，而不是文字内容 line boxes即包裹每行文字，一行文字一个line boxes，一个没有设置height属性的div的高度就是由一个一个line boxes的高度堆积而成的；line boxes内部的inline boxes(文字、图片、span等inline属性的标签)中谁的实际line-height值最高，line-height就根据其值形成高度 在单行或多行或图片 垂直居中实现上的应用：行高的垂直居中性： 单行文字的垂直居中对齐： 把line-height设置为height一样大小的值您需要的box的大小的值，就可实现单行文字的垂直居中;[这个height是多余的~] 多行文字的垂直居中对齐：要实现高度不固定的文字垂直居中使用padding即可；对于高度固定的div，里面文字单行或多行显示，字体大小有大有小的情况，需借助于line-height： line boxes的高度取决于它的下属职员的最高高度。而这个高度由一个不占据任何空间的空格完成，即 ==对&nbsp;设置font-size为0，line-height为所需要的高度==。同时，我们为了分隔line boxes，同时要保持在一行上，需要 ==设置display属性为inline-block== 12345678910#css代码：修复 IE8问题... ：.mulit_line&#123;line-height:150px; border:1px dashed #cccccc; padding-left:5px;&#125;.mulit_line span&#123;display:-moz-inline-stack; display:inline-block; line-height:1.4em; vertical-align:middle;&#125;.mulit_line i&#123;width:0; display:-moz-inline-stack; display:inline-block; vertical-align:middle; font-size:0;&#125;#html代码：&lt;p class=&quot;mulit_line&quot;&gt; &lt;span style=&quot;font-size:12px;&quot;&gt;这里是高度为150像素的标签内的多行文字，文字大小为12像素。&lt;br /&gt;这里是第二行，用来测试多行的显示效果。&lt;/span&gt; &lt;i&gt;&amp;nbsp;&lt;/i&gt;&lt;/p&gt; 大小不固定图片的垂直居中对齐： 透明gif图片+背景定位的方法：利用background-position:center实现图片居中显示，有益于维护控制成本。原理：使用一个透明的gif图片做覆盖层，高宽拉伸至所需要的大小，再添加一个background- position:center center属性。而background-image建议写在页面上，因为实际项目中，图片地址肯定是个动态的URL地址，css文件似乎不支持动态URL地址； display:table-cell和文字大小控制居中： 通过文字大小控制IE下图片垂直居中[低消耗]，即应用IE默认文字空间的概念，该空间是看不见摸不着的，较为抽象；该方法的不足之处为：不支持img外标签的浮动，所以当多图片显示时需要再在外面嵌套一层标签——资源消耗多了！原理：利用font-size大小实现IE下图片垂直居中，将font-size设置得很大，目的是撑开IE下默认文字空间的高度，其性质类似于空格，然后通过vertical-align:middle属性让图片与这个高高的空白空格空间垂直居中对齐； display:inline-block和文字大小控制居中：适用于多图显示，一般而言，图片的外部都有一个起链接作用的a标签，而本方法就只需要这么个a标签来实现图片垂直且居中的显示效果，必须将该a标签默认的inline属性设置为display:inline-block，这样，a标签即支持宽度，又支持vertical-align:middle,配合img的vertical-align:middle即可实现图片的水平居中显示了；注：img标签外可以是a标签或span这类inline属性的标签，div标签也可，但其css代码在IE中，要先转成inline属性，再转变成类似的inline-block属性：display:inline-block;*display:inline; zoom:1; 透明图片[或高100%宽0的标签i…]拉伸对齐实现垂直居中显示：将要显示的图片与一张高度100%，宽度0像素的透明图片vertical-align:middle对齐。原理：将2中的文字空间实例成一张透明的gif图片，高度可轻松设置为外部标签的高度，宽度压缩至最小，然后通过vertical-align:middle对齐，就实现效果了，并且基本上2中淘宝的table-cell+font-size方法会带来的些问题都避免了，兼容性更好；注：img外容器的宽度要大于显示图片的最大宽度+1像素，且img外容器的字体大小设为0px，也可不设，但是两个img标签要连着写，避免空格；优化：可将透明图片(任意图片均可)换成行内元素，如span、i标签等，只要将css样式设置为==span{display:inline-block; height:100%; width:0; vertical-align:middle;}== 即可，div标签也可以，但是css代码多些:display:inline; display:inline-block，即先变成inline属性，再转变成inline-block属性。如此，就少了一次http请求，效果相同!!! font-size + line-height实现垂直居中显示：兼容IE、现代浏览器，但opera浏览器(使用率低)下图片无法垂直居中显示—推!!!!!原理：在IE下使用font-size使图片垂直居中显示，Firefox，chrome等现代浏览器使用line-height配合img本身的vertical-align属性使垂直居中显示，由于两者不冲突，所以没有hack就实现的效果。css代码简洁明了，HTML代码也非常清晰：只一层外标签li+img即可。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107#通用部分代码：清除浮动&amp;&amp;去ul样式ul&#123;list-style: none;&#125;.fix&#123;zoom: 1;&#125;.fix:after,.fix:before&#123;display: table;content:&quot;&quot;;clear: both;&#125;&lt;!-- 1.透明gif图片+背景定位的方法 --&gt;#css部分：.align_box_1 li&#123;width:1em; height:1em; padding:0.1em; margin:0 0.1em 0 0; font-size:128px; float:left; border:1px solid #beceeb;&#125;.align_box_1 li img&#123;display:block; width:100%; height:100%; background-repeat:no-repeat; background-position:center;&#125;#HTML部分：&lt;ul class=&quot;align_box_1 fix&quot;&gt; &lt;li&gt; &lt;img src=&quot;../image/pixel.gif&quot; style=&quot;background-image:url(http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg);&quot; /&gt; &lt;/li&gt; &lt;li&gt; &lt;img src=&quot;../image/pixel.gif&quot; style=&quot;background-image:url(http://image.zhangxinxu.com/image/study/s/s128/mm2.jpg);&quot; /&gt; &lt;/li&gt; &lt;li&gt; &lt;img src=&quot;../image/pixel.gif&quot; style=&quot;background-image:url(http://image.zhangxinxu.com/image/study/s/s128/mm3.jpg);&quot; /&gt; &lt;/li&gt;&lt;/ul&gt;&lt;!-- 2.display:table-cell和文字大小控制居中 --&gt;#css代码：.align_box2 li&#123;float:left; margin-right:13px;&#125;.align_box2 li div&#123;display:table-cell; width:144px; height:144px; border:1px solid #beceeb; font-size:118px; text-align:center; vertical-align:middle;&#125;.align_box2 li div img&#123;vertical-align:middle;&#125;#HTML部分:&lt;ul class=&quot;align_box2 fix&quot;&gt; &lt;li&gt;&lt;div&gt;&lt;img src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg&quot; /&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt;&lt;div&gt;&lt;img src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm2.jpg&quot; /&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt;&lt;div&gt;&lt;img src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm3.jpg&quot; /&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt;&lt;div&gt;&lt;img src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm4.jpg&quot; /&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;!-- 3.display:inline-block和文字大小控制居中--&gt;#css部分：.align_box3 a&#123;display:inline-block; width:1.2em; font-size:128px; text-align:center; vertical-align:middle;&#125;.align_box3 a img&#123;vertical-align:middle; padding:2px; border:1px solid #beceeb;&#125;#HTML部分：&lt;div class=&quot;align_box3 fix&quot;&gt; &lt;a href=&quot;#&quot;&gt; &lt;img src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;#&quot;&gt; &lt;img src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm2.jpg&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;#&quot;&gt; &lt;img src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm3.jpg&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;#&quot;&gt; &lt;img src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm4.jpg&quot; /&gt; &lt;/a&gt;&lt;/div&gt;&lt;!--4. 透明图片[或高100%宽0的标签i...]拉伸对齐实现垂直居中显示--&gt;#css部分：.align_box4 li&#123;height:128px; width:150px; padding:13px 0; float:left; margin-right:10px; border:1px solid #beceeb; text-align:center; font-size:0;&#125;.align_box4 li .show_img&#123;vertical-align:middle;&#125;//透明图片：.align_box4 li .alpha_img&#123;height:100%; width:1px; vertical-align:middle;&#125;//行内标签：.align_box4 li .alpha_img&#123;height:100%; vertical-align:middle;display: inline-block;&#125;#HTML部分：&lt;ul class=&quot;align_box4 fix&quot;&gt; &lt;li&gt; &lt;img class=&quot;show_img&quot; src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg&quot; /&gt; &lt;!-- &lt;img class=&quot;alpha_img&quot; src=&quot;./pixel.gif&quot; /&gt; --&gt; &lt;a class=&quot;alpha_img&quot; href=&quot;#&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;img class=&quot;show_img&quot; src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm2.jpg&quot; /&gt; &lt;!-- &lt;img class=&quot;alpha_img&quot; src=&quot;./pixel.gif&quot; /&gt; --&gt; &lt;a class=&quot;alpha_img&quot; href=&quot;#&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;img class=&quot;show_img&quot; src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm3.jpg&quot; /&gt; &lt;!-- &lt;img class=&quot;alpha_img&quot; src=&quot;./pixel.gif&quot; /&gt; --&gt; &lt;a class=&quot;alpha_img&quot; href=&quot;#&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;img class=&quot;show_img&quot; src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm4.jpg&quot; /&gt; &lt;!-- &lt;img class=&quot;alpha_img&quot; src=&quot;./pixel.gif&quot; /&gt; --&gt; &lt;a class=&quot;alpha_img&quot; href=&quot;#&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;!--5.font-size + line-height实现垂直居中显示 --&gt;#css部分：.align_box5&#123;overflow:hidden; zoom:1;&#125;.align_box5 li&#123;float:left; width:150px; height:150px; text-align:center; line-height:150px; *font-size:125px;&#125;.align_box5 li:after&#123;content:&apos; &apos;; vertical-align:middle;&#125;.align_box5 li img&#123;vertical-align:middle;&#125;#HTML部分：&lt;ul class=&quot;align_box5&quot;&gt; &lt;li&gt;&lt;img src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm2.jpg&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm3.jpg&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm4.jpg&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm5.jpg&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;http://image.zhangxinxu.com/image/study/s/s128/mm6.jpg&quot; /&gt;&lt;/li&gt; &lt;/ul&gt; 行高在文章显示中的应用： 行高的几种表示方法：px/em，或normal，或百分值，或数值，或inherit继承； 显示文章的box里，需根据文字大小自动调整间距px，一般文章显示宽度最好650像素，1.5倍行距，而normal值在1-1.2之间normal。 实现文字间距自动适应于文字的大小： 使用通配符“”来解决出现文字重叠情况，但使用通配符大大增加了css的渲染，效率低：==.article_box {line-height:150%;}== 使用数值，==.article_box{line-height:1.5;}== 150%与1.5在值上是相同的，但区别在继承上：使用百分比会先计算line-height的值，然后以px为单位继承下去；而1.5则是先继承1.5这个值，遍历到了该标签再计算去line-height的像素值。12.article_box *&#123;line-height:150%;&#125;.article_box&#123;line-height:1.5;&#125; 使用行高代替高度，避免haslayout：行高与高度的css属性有一个较为隐蔽的差异，即使用height会使标签haslayout，而使用line-height则不会。上图中第一个标签使用height定高，结果宽度直接100%显示；第二个标签使用line-height定高，结果很规矩，自适应与内部文字大小。其代码如下： 123456789101112#css部分：.out&#123;display:inline-block; background:#a0b3d6; margin-top:20px;&#125;.in1&#123;display:block; height:20px;&#125;.in2&#123;display:block; line-height:20px;&#125;#html部分：&lt;span class=&quot;out&quot;&gt; &lt;span class=&quot;in1&quot;&gt;height:20px;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;out&quot;&gt; &lt;span class=&quot;in2&quot;&gt;line-height:20px;&lt;/span&gt;&lt;/span&gt; 补充：hasLayout：摘自《精通CSS 高级Web标准解决方案》 IE使用Layout概念来控制元素的尺寸和位置。如果一个元素有Layout，它就有自身的尺寸和位置；如果没有，它的尺寸和位置由最近的拥有布局的祖先元素控制。 hasLayout是IE特有的属性，不是CSS属性。可以用Javascript函数hasLayout查看一个元素是否拥有Layout。如果有，这个函数就返回true；否则返回false。hasLayout是一个只读属性，所以无法使用Javascript进行设置。 1234567891011121314151617181920#默认情况下，用于Layout的元素：&lt;html&gt;, &lt;body&gt;&lt;table&gt;, &lt;tr&gt;, &lt;th&gt;, &lt;td&gt;&lt;img&gt;&lt;hr&gt;&lt;input&gt;, &lt;button&gt;, &lt;select&gt;, &lt;textarea&gt;, &lt;fieldset&gt;, &lt;legend&gt;&lt;iframe&gt;, &lt;embed&gt;, &lt;object&gt;, &lt;applet&gt;&lt;marquee&gt;注：&lt;p&gt;和&lt;div&gt;默认不拥有Layout#凡是具有以下CSS属性的元素，也都拥有Layout：position: absolutefloat: left|rightdisplay: inline-blockwidth: any value other than &apos;auto&apos;height: any value other than &apos;auto&apos;zoom: any value other than &apos;normal&apos; （IE专用属性）writing-mode: tb-rl（IE专用属性）overflow: hidden|scroll|auto（只对IE 7及以上版本有效）overflow-x|-y: hidden|scroll|auto（只对IE 7及以上版本有效） 参考：张鑫旭-鑫空间-鑫生活:大小不固定的图片、多行文字的水平垂直居中","categories":[{"name":"CSS页面重构","slug":"CSS页面重构","permalink":"http://yoursite.com/categories/CSS页面重构/"}],"tags":[{"name":"line-height","slug":"line-height","permalink":"http://yoursite.com/tags/line-height/"},{"name":"CSS页面优化","slug":"CSS页面优化","permalink":"http://yoursite.com/tags/CSS页面优化/"}]},{"title":"CSS3-05 多列布局","slug":"CSS3/多列布局","date":"2015-03-21T11:30:00.000Z","updated":"2016-12-06T06:17:06.168Z","comments":true,"path":"2015/03/21/CSS3/多列布局/","link":"","permalink":"http://yoursite.com/2015/03/21/CSS3/多列布局/","excerpt":"多列布局：用float进行图文浑排 Css多列布局继承自块级布局模式，允许简单地定义多列文本 多栏布局 主要用于文字排版，为了最优化使用大的显示屏幕，设计中应限制文字段落的宽度而并列排布：指定的栏数||栏宽首先保证最低需求要满足-即至少栏数||栏宽","text":"多列布局：用float进行图文浑排 Css多列布局继承自块级布局模式，允许简单地定义多列文本 多栏布局 主要用于文字排版，为了最优化使用大的显示屏幕，设计中应限制文字段落的宽度而并列排布：指定的栏数||栏宽首先保证最低需求要满足-即至少栏数||栏宽 通过控制栏数来实现指定栏数的布局样式:column-count: 3;会自动计算每列的宽度； 通过控制每一栏的宽度来实现指定栏宽的布局样式：column-width: 100px;会自动调整列数，若宽度不足两列，则只显示一列，宽度也将失效； 复合属性columns：同时设置栏宽和栏数，当能保证指定栏宽时，栏数指定为几就分几栏，若无法保证指定的最低栏宽，则会减少栏数来保证最低栏宽!!! 即优先保证栏宽，在栏宽至少能达到指定宽度时，设置列数：columns: 15 8em; 兼容性处理： 多列属性会被不支持多列模型的浏览器忽略 -webkit-columns: 3; -moz-column: 3; 控制栏与栏之间的间隙宽度column-gap: 3em;建议值为1em； 设置栏与栏之间的分割线的样式column-rule: 1px solid lightblue; -取值同border属性一致，其中column-rule-width: 5px||thin(最窄)||medium(中等)||thick(最厚);column-rule-color: #fff;column-rule-style: solid; 设置指定元素跨越多少列column-span: all;默认为1；—FF不支持 注-对于复合属性，当值单位都不同时，可不考虑其顺序12345678910111213141516p &#123; &lt;!--通过控制栏数来实现指定栏数的布局样式--&gt; column-count: 3; &lt;!--通过控制每一栏的宽度来实现指定栏宽的布局样式--&gt; column-width: 100px; &lt;!--当视口达到某一节点，即正好满足指定条件时，优先考虑栏宽--&gt; columns: 15 8em; column-gap: normal;//1rem column-span: all; &lt;!--用法同border属性一致--&gt; column-rule: 1px solid lightblue; column-rule-width: 1px; column-rule-style: solid; column-rule-color: lightblue; column-span: all;&#125;","categories":[{"name":"CSS3","slug":"CSS3","permalink":"http://yoursite.com/categories/CSS3/"}],"tags":[{"name":"CSS3","slug":"CSS3","permalink":"http://yoursite.com/tags/CSS3/"},{"name":"多列布局","slug":"多列布局","permalink":"http://yoursite.com/tags/多列布局/"}]},{"title":"CSS3-04 视口Viewport与CSS响应式布局","slug":"CSS3/视口viewport与响应式布局","date":"2015-03-20T01:47:00.000Z","updated":"2016-12-06T06:16:53.943Z","comments":true,"path":"2015/03/20/CSS3/视口viewport与响应式布局/","link":"","permalink":"http://yoursite.com/2015/03/20/CSS3/视口viewport与响应式布局/","excerpt":"视口Viewport针对手机的不同分辨率、不同屏幕大小，如何使我们开发的应用或页面大小能适应各种高端手机页面呢？—–html5 viewport: 通过修改meta标签的name属性为viewport，把meta标签中包含的信息设置为移动端视口配置的相关设置。 meta:原信息标签-给浏览器解析-可定制meta功能：name=”viewport” -在移动端的手机屏幕即视口,类似input中的type属性","text":"视口Viewport针对手机的不同分辨率、不同屏幕大小，如何使我们开发的应用或页面大小能适应各种高端手机页面呢？—–html5 viewport: 通过修改meta标签的name属性为viewport，把meta标签中包含的信息设置为移动端视口配置的相关设置。 meta:原信息标签-给浏览器解析-可定制meta功能：name=”viewport” -在移动端的手机屏幕即视口,类似input中的type属性 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0&quot;&gt; 网络视图：viewport 用户网页的可视区域 即视区 Web浏览器把页面放在一个虚拟”窗口viewport”中，即视口，比屏幕宽，用户可通过平移和缩放来查看网页不同部分 ——– 针对手机浏览器用户体验来优化的网页的布局 设置Viewport123456789101112131415161718&lt;!--作为设备的宽度-单位为缩放100%时CSS的像素--&gt;////设置宽度为屏幕宽度,也可设置一个固定的值(尽可能不用):宽高只用宽度即可~width=device-width height=device-height//缩放比例的理想范围：[0.25,10.0]maximum-scale=1.0 //设置最大缩放比例[0.25,10.0]//设置最小缩放比例:不可小于初始化的比例[initial-scale,10.0]minimum-scale=1.0//初始缩放比例,即页面第一次 load 时的缩放比例;initial-scale=1.0//是否允许用户进行缩放网页:yes(默认)/1 || no/0//no/0:如果设置为no，则minimax-scale和maximum-scale将被忽略，即不允许缩放user-scalable=no 注：在Android中还支持 target-densitydpi像素密度，定义为每英寸点的数量(dpi)，因该属性只有Android支持，且Android已经决定废弃了 12345678910//使用设备原本的dpi作为目标dpi，不会发生默认缩放target-densitydpi: device-dpi//使用high-dpi作为dpi。中等像素密度和低像素密度设备相应缩小target-densitydpi: high-dpi//使用medium-dpi作为dpi。高像素密度设备相应放大，像素密度设备相应缩小。这是默认的target-densitytarget-densitydpi: medium-dpi//使⽤用mdpi作为目标dpi。中等像素密度和高像素密度设备相应放大target-densitydpi: low-dpi//指定一个具体的dpi值作为target-dpi。这个值范围需要在70-400之间target-densitydpi: value CSS响应式布局定义： 为不同屏幕分辨率定义不同的布局； 使一个网站可兼容多个终端，而不是为每一个终端做一个特定的版本(有时不同终端需实现不同功能时，这会成为响应式布局的劣势)； 其概念是为了解决移动互联网浏览而诞生的—改善用户体验 媒体查询：结合CSS媒体查询,可以创建适应不同设备的方向的布局，如：竖屏portrait：指定输出设备中的页面可见区域高度大于或等于宽度||横屏landscape： 除portrait值情况外，都是landscape 如何实现媒体查询： CSS3加入的媒体查询使得无需修改内容便可使样式应用于某些特定的设备范围 作用：通过不同的屏幕大小定义不同样式 媒体查询的大部分媒介特性都接受min和max：&gt;= 或 &lt;= 媒体类型：screen屏幕 || print打印机 默认为all，我们通常写screen 媒体属性：min-width || max-width 逻辑操作符： and 用于把多个媒体属性组合起来，合并到同一条媒体查询中 样式表中内嵌@media : 在link中使用@media： 1234567891011121314151617181920212223242526272829303132333435&lt;!--查询浏览器宽度为700——1000，父标签wrap背景颜色改为黄色--&gt;#wrap &#123; width: 1200px; height: 250px; margin: 0 auto;&#125;#wrap div &#123; float: left; width: 300px; height: 250px;&#125;#div1&#123; background: red;&#125;#div2&#123; background: yellow;&#125;#div3&#123; background: blue;&#125;#div4&#123; background: green;&#125;//样式表中内嵌@media@media only screen and (min-width: 700px) and (max-width: 1000px)&#123; #wrap &#123; background: yellow; &#125;&#125;//在link中使用@media：&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;1.css.css&quot; media=&quot;only screen and (min-width: 700px) and (max-width: 1000px)&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;2.css&quot; media=&quot;only screen and (max-width: 699px)&quot;/&gt;&lt;div id=&quot;wrap&quot;&gt; &lt;div id=&quot;div1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;&lt;/div&gt; &lt;div id=&quot;div3&quot;&gt;&lt;/div&gt; &lt;div id=&quot;div4&quot;&gt;&lt;/div&gt; &lt;/div&gt; 响应式网格视图通常是 12列，宽度为100%，在浏览器窗口大小调整时会自动伸缩:在每列中指定 class，class=”col-“用于定义每列有几个span:使用 @media 查询，可针对不同的媒体类型,添加断点，并定义不同的样式：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576.col-1 &#123;width: 8.33%;&#125;.col-2 &#123;width: 16.66%;&#125;.col-3 &#123;width: 25%;&#125;.col-4 &#123;width: 33.33%;&#125;.col-5 &#123;width: 41.66%;&#125;.col-6 &#123;width: 50%;&#125;.col-7 &#123;width: 58.33%;&#125;.col-8 &#123;width: 66.66%;&#125;.col-9 &#123;width: 75%;&#125;.col-10 &#123;width: 83.33%;&#125;.col-11 &#123;width: 91.66%;&#125;.col-12 &#123;width: 100%;&#125;&lt;!--使用媒体查询在768px处添加断点：屏幕(浏览器窗口)宽度小于768px时，每一列宽度是100%--&gt;@media only screen and (max-width: 768px) &#123; /* For mobile phones: */ [class*=&quot;col-&quot;] &#123; width: 100%; &#125;&#125;&lt;!--移动端优先设计： 注：两组类样式是相同的，但名称不同 (col- || col-m-)--&gt;/* For mobile phones: */[class*=&quot;col-&quot;] &#123; width: 100%;&#125;@media only screen and (min-width: 600px) &#123; /* For tablets: */ .col-m-1 &#123;width: 8.33%;&#125; .col-m-2 &#123;width: 16.66%;&#125; .col-m-3 &#123;width: 25%;&#125; .col-m-4 &#123;width: 33.33%;&#125; .col-m-5 &#123;width: 41.66%;&#125; .col-m-6 &#123;width: 50%;&#125; .col-m-7 &#123;width: 58.33%;&#125; .col-m-8 &#123;width: 66.66%;&#125; .col-m-9 &#123;width: 75%;&#125; .col-m-10 &#123;width: 83.33%;&#125; .col-m-11 &#123;width: 91.66%;&#125; .col-m-12 &#123;width: 100%;&#125;&#125;@media only screen and (min-width: 768px) &#123; /* For desktop: */ .col-1 &#123;width: 8.33%;&#125; .col-2 &#123;width: 16.66%;&#125; .col-3 &#123;width: 25%;&#125; .col-4 &#123;width: 33.33%;&#125; .col-5 &#123;width: 41.66%;&#125; .col-6 &#123;width: 50%;&#125; .col-7 &#123;width: 58.33%;&#125; .col-8 &#123;width: 66.66%;&#125; .col-9 &#123;width: 75%;&#125; .col-10 &#123;width: 83.33%;&#125; .col-11 &#123;width: 91.66%;&#125; .col-12 &#123;width: 100%;&#125;&#125;&lt;!--如果是竖屏背景将是浅蓝色：--&gt;@media only screen and (orientation: landscape) &#123; body &#123; background-color: lightblue; &#125;&#125;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col-3 col-m-3&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;col-6 col-m-9&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;col-3 col-m-12&quot;&gt;...&lt;/div&gt;&lt;/div&gt; 针对桌面设备:第一和第三部分跨越 3 列。中间部分跨域 6 列 针对平板设备:第一跨域 3列，第二部分跨越 9 列，第三部分跨域 12 列： 图片： 123456789101112131415161718192021222324&lt;!--弹性图片：--&gt;img &#123; width: 50%; &lt;!--设置阈值:保证图片能清晰显示：当img随视口宽度达到阈值时， 宽度就不会再随之进行50%的变化---一般卡max-width阈值即可--&gt; max-width: 534px; min-width: 300px;&#125;&lt;!--弹性盒模型--&gt;div &#123; width: 100%; height: auto; max-width: 534px; min-width: 10em; //一行至少显示10个字符 &lt;!--标签的继承性：字体大小：em参照标签-父标签||rem参照标签-根节点html(默认16px --可重新定义大小) rem---常用于移动端更改页面字号大小时，直接改根标签尺寸，对应的rem即为对应字号大小~ 最后均转换为px在页面上显示 浏览器最低显示密度:8px||12px --&gt;&#125; 背景图片可以响应页面大小来调整其大小，即缩放： 方法1：如果 background-size 属性设置为 “contain”, 背景图片将按比例自适应内容区域。图片保持其比例不变 方法2：如果 background-size 属性设置为 “100% 100%” ，背景图片将延展覆盖整个区域-变形：所以设置为”100%” 方法3：如果 background-size 属性设置为 “cover”，则会把背景图像扩展至足够大，以使背景图像完全覆盖背景区域(不变形)。背景图像的某些部分无法显示在背景定位区域中。 不同设备显示不同图片： 大尺寸图片–大屏幕 / 小尺寸图片–小屏幕 使用媒体查询，根据不同的设备显示不同的图片： 123456789101112/* 设备小于 400px: */body &#123; background-image: url(&apos;img_smallflower.jpg&apos;);&#125;/* 设备大于 400px (也等于): */@media only screen and (min-device-width: 400px) &#123;//@media only screen and (min-width: 400px) &#123; body &#123; background-image: url(&apos;img_flowers.jpg&apos;); &#125;&#125; HTML5的元素可以设置多张图片:IE和FF不支持12345678&lt;!--srcset属性是必须的，定义了图片资源media属性是可选的，媒体查询对于不支持&lt;picture&gt;元素的浏览器也可以用&lt;img&gt;元素来替代--&gt;&lt;picture&gt; &lt;source srcset=&quot;img_smallflower.jpg&quot; media=&quot;(max-width: 400px)&quot;&gt; &lt;source srcset=&quot;img_flowers.jpg&quot;&gt; &lt;img src=&quot;img_flowers.jpg&quot; alt=&quot;Flowers&quot;&gt;&lt;/picture&gt; 视频(video)： 12345//如果 max-width 属性设置为 100%, 视频播放器会根据屏幕自动调整比例，但不会超过其原始大小video &#123; max-width: 100%; height: auto;&#125; 框架： 响应式 Web 设计框架 Bootstrap:基于 HTML、CSS、JAVASCRIPT","categories":[{"name":"CSS3","slug":"CSS3","permalink":"http://yoursite.com/categories/CSS3/"}],"tags":[{"name":"CSS3","slug":"CSS3","permalink":"http://yoursite.com/tags/CSS3/"},{"name":"视口Viewport","slug":"视口Viewport","permalink":"http://yoursite.com/tags/视口Viewport/"},{"name":"响应式布局","slug":"响应式布局","permalink":"http://yoursite.com/tags/响应式布局/"}]},{"title":"CSS3-03 用户界面","slug":"CSS3/用户界面","date":"2015-03-20T00:30:00.000Z","updated":"2016-12-06T06:16:19.933Z","comments":true,"path":"2015/03/20/CSS3/用户界面/","link":"","permalink":"http://yoursite.com/2015/03/20/CSS3/用户界面/","excerpt":"在CSS3中增加了一些新的用户界面特性来跳转元素尺寸、框尺寸和外边框 resize:指定一个元素是否应该由用户去调整大小-==resize: none(禁调)|both(用户可调宽高)|horizontal(用户可调元素水平方向)|vertical(用户可调元素竖直方向)==，其中由用户指定，即resize:both;overflow:auto;—–最早用于textarea中; outline-offset:轮廓偏移，并在超出边框边缘的位置绘制轮廓。==outline-offset: length(轮廓与边框边缘距离,默认为0)|inherit(从父元素继承该属性值);== 轮廓与边框的不同：轮廓不占用空间，也可是非矩形：outline:2px solid red;outline-offset:15px;—–非盒模型，则改变后不会破坏页面布局;——轮廓相关属性：outline-width(2)|outline-style(2)|outline-color(2)| outline: 1px solid red;—-&gt;用法同border属性一致; text-overflow:文本超出时的操作==text-overflow: clip(修剪文本)|ellipsis(显示省略符…来表示被修剪的文本)|string(使用给定的字符串来代表被修剪的文本);== white-space:nowrap;overflow:hidden;text-overflow:ellipsis; box-sizing: box-sizing: content-box(指定元素宽高只含content)|border-box(指定元素宽高还包含border和padding)|inherit(继承于父元素): cursor: 定义鼠标指针放在一个元素边界范围内时所用的光标形状,默认为 ‘箭头’","text":"在CSS3中增加了一些新的用户界面特性来跳转元素尺寸、框尺寸和外边框 resize:指定一个元素是否应该由用户去调整大小-==resize: none(禁调)|both(用户可调宽高)|horizontal(用户可调元素水平方向)|vertical(用户可调元素竖直方向)==，其中由用户指定，即resize:both;overflow:auto;—–最早用于textarea中; outline-offset:轮廓偏移，并在超出边框边缘的位置绘制轮廓。==outline-offset: length(轮廓与边框边缘距离,默认为0)|inherit(从父元素继承该属性值);== 轮廓与边框的不同：轮廓不占用空间，也可是非矩形：outline:2px solid red;outline-offset:15px;—–非盒模型，则改变后不会破坏页面布局;——轮廓相关属性：outline-width(2)|outline-style(2)|outline-color(2)| outline: 1px solid red;—-&gt;用法同border属性一致; text-overflow:文本超出时的操作==text-overflow: clip(修剪文本)|ellipsis(显示省略符…来表示被修剪的文本)|string(使用给定的字符串来代表被修剪的文本);== white-space:nowrap;overflow:hidden;text-overflow:ellipsis; box-sizing: box-sizing: content-box(指定元素宽高只含content)|border-box(指定元素宽高还包含border和padding)|inherit(继承于父元素): cursor: 定义鼠标指针放在一个元素边界范围内时所用的光标形状,默认为 ‘箭头’ 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!--resize: none|both|horizontal|vertical:--&gt;#div1 &#123; width: 100px; height: 100px; border: 1px solid red; //resize需要与overflow配合使用才生效 resize: none;//禁调 resize: both;/均可调 resize: horizontal;//可调水平方向 resize: vertical;//可调竖直方向 overflow: auto;&#125;&lt;!--outline-offset: length|inherit:--&gt;#div2 &#123; width: 100px; height: 100px; border: 1px solid black; &lt;!--border外15px处--&gt; outline: 1px solid red; outline-offset: 15px;&#125;&lt;!--text-overflow: clip|ellipsis|string;--&gt;#div3 &#123; //text-overflow需要与white-space和overflow配合使用生效 white-space:nowrap; //强制不换行 overflow:hidden; border:1px solid #000; text-overflow:ellipsis;&#125;#div3:hover &#123; &lt;!--注:inherit 关键字指定一个属性应从父元素继承它的值, 可用于任何 HTML 元素上的任何 CSS 属性--&gt; text-overflow:inherit; overflow:visible;&#125; cursor相关属性设置：12345678910111213141516171819&lt;p id=&quot;p1&quot; style=&quot;cursor:none&quot;&gt;none&lt;/p&gt;&lt;p id=&quot;p2&quot; style=&quot;cursor: context-menu;&quot;&gt;contentxt-menu:右键菜单&lt;/p&gt;&lt;p id=&quot;p3&quot; style=&quot;cursor: cell;&quot;&gt;cell:可添加单元&lt;/p&gt;&lt;p id=&quot;p4&quot; style=&quot;cursor: vertical-text;&quot;&gt;vertical-text:竖排文本&lt;/p&gt;&lt;p id=&quot;p5&quot; style=&quot;cursor: alias;&quot;&gt;alias:别名&lt;/p&gt;&lt;p id=&quot;p6&quot; style=&quot;cursor: copy;&quot;&gt;copy&lt;/p&gt;&lt;p id=&quot;p7&quot; style=&quot;cursor: no-drop;&quot;&gt;no-drop:禁止&lt;/p&gt;&lt;p id=&quot;p8&quot; style=&quot;cursor: not-allowed;&quot;&gt;not-allowed:禁止&lt;/p&gt;&lt;p id=&quot;p9&quot; style=&quot;cursor: nesw-resize;&quot;&gt;nesw-resize:45deg调整&lt;/p&gt;&lt;p id=&quot;p10&quot; style=&quot;cursor: nwse-resize;&quot;&gt;nwse-resize:135deg调整&lt;/p&gt;&lt;p id=&quot;p11&quot; style=&quot;cursor: col-resize;&quot;&gt;col-resize&lt;/p&gt;&lt;p id=&quot;p12&quot; style=&quot;cursor: row-resize;&quot;&gt;row-resize&lt;/p&gt;&lt;p id=&quot;p13&quot; style=&quot;cursor: all-scroll;&quot;&gt;all-scroll:四方向可调&lt;/p&gt;&lt;p id=&quot;p14&quot; style=&quot;cursor: zoom-in;&quot;&gt;zoom-in:放大&lt;/p&gt;&lt;p id=&quot;p15&quot; style=&quot;cursor: zoom-out;&quot;&gt;zoom-out:缩小&lt;/p&gt;&lt;p id=&quot;p16&quot; style=&quot;cursor: move;&quot;&gt;move:可被移动&lt;/p&gt;&lt;p id=&quot;p17&quot; style=&quot;cursor: pointer;&quot;&gt;pointer&lt;/p&gt;&lt;p id=&quot;p18&quot; style=&quot;cursor: help;&quot;&gt;help&lt;/p&gt;&lt;p id=&quot;p19&quot; style=&quot;cursor: wait;&quot;&gt;wait:正忙&lt;/p&gt;","categories":[{"name":"CSS3","slug":"CSS3","permalink":"http://yoursite.com/categories/CSS3/"}],"tags":[{"name":"CSS3","slug":"CSS3","permalink":"http://yoursite.com/tags/CSS3/"},{"name":"用户界面","slug":"用户界面","permalink":"http://yoursite.com/tags/用户界面/"}]},{"title":"NodeJS02-进阶篇","slug":"nodejs/NodeJs02","date":"2014-11-16T12:40:10.000Z","updated":"2016-12-06T05:58:55.634Z","comments":true,"path":"2014/11/16/nodejs/NodeJs02/","link":"","permalink":"http://yoursite.com/2014/11/16/nodejs/NodeJs02/","excerpt":"在NodeJS中，一般将代码合理拆分到不同的JS文件中，每一个文件就是一个模块，而文件路径就是模块名;在编写每个模块时，都有require、exports、module三个预先定义好的变量可供使用。","text":"在NodeJS中，一般将代码合理拆分到不同的JS文件中，每一个文件就是一个模块，而文件路径就是模块名;在编写每个模块时，都有require、exports、module三个预先定义好的变量可供使用。 require函数：在当前模块中加载或使用其他模块时，传入一个模块名[相对路径./绝对路径/或C:盘符开头]，返回一个模块导出对象。注：模块名中的.js扩展名可省； exports对象：当前模块的导出对象，用于导出模块公有方法和属性。require函数返回的即是当前模块的exports对象； module对象：可访问到当前模块的部分相关信息，多用于替换当前模块的导出对象； 1234567891011121314151617//模块的加载：var foo1 = require(&apos;./foo&apos;);var foo2 = require(&apos;./foo.js&apos;);var foo3 = require(&apos;/home/user/foo&apos;);var foo4 = require(&apos;/home/user/foo.js&apos;);// foo1至foo4中保存的是同一个模块的导出对象。var data = require(&apos;./data.json&apos;);//模块导出对象：exports.hello = function () &#123; console.log(&apos;Hello World!&apos;);&#125;;//模块默认导出对象被替换为一个函数：module.exports = function () &#123; console.log(&apos;Hello World!&apos;);&#125;; 模块初始化一个模块中的JS代码仅在模块第一次被使用时执行一次，并在执行过程中初始化模块的导出对象。之后，缓存起来的导出对象被重复利用。 主模块通过命令行参数传递给NodeJS以启动程序的模块被称为主模块。主模块负责调度组成整个程序的其它模块完成工作。如主模块main.js1234567891011121314151617181920212223242526272829$ node main.js------------完整示例-----------------//文件目录：- /home/user/hello/ - util/ counter.js main.js//其中counter.js内容：//其模块内部定义一个私有变量i，并在exports对象导出了一个公有方法countvar i = 0;function count() &#123; return ++i;&#125;exports.count = count;//主模块main.js内容：var counter1 = require(&apos;./util/counter&apos;);var counter2 = require(&apos;./util/counter&apos;);console.log(counter1.count());console.log(counter2.count());console.log(counter2.count());//运行结果如下：$ node main.js123 结果说明：counter.js并没有被require了两次而初始化两次，仅在counter.js第一次被使用时执行并初始化模块导出对象，然后将导出对象缓存起来，重复利用，所以i值是依次递增的。NodeJS使用CMD模块系统，主模块作为程序入口点，所有模块在执行过程中只初始化一次。 模块路径解析规则：require函数支持斜杠（/）或盘符（C:）开头的绝对路径，也支持./开头的相对路径—-在模块间建立了强耦合关系：缺点：一旦某个模块文件变更存放位置，则相关依赖模块也需调整位置，牵一发而动全身。SO，require函数支持第三种形式的路径，写法类似于foo/bar，并依次按照以下规则解析路径，直到找到模块位置： NodeJS内置模块：不做路径解析，直接返回内部模块的导出对象：require(‘fs’)； node_modules目录：NodeJS定义了一个特殊的node_modules目录用于存放模块。例如某个模块的绝对路径是/home/user/hello.js，在该模块中使用require(‘foo/bar’)方式加载模块时，则NodeJS依次尝试使用以下路径： 123/home/user/node_modules/foo/bar/home/node_modules/foo/bar/node_modules/foo/bar NODE_PATH环境变量：NodeJS允许通过NODE_PATH环境变量来指定额外的模块搜索路径。NODE_PATH环境变量中包含一到多个目录路径，路径之间在Linux下使用:分隔，在Windows下使用;分隔。 123456#定义NODE_PATH环境变量：NODE_PATH=/home/user/lib:/home/lib//当使用require(&apos;foo/bar&apos;)的方式加载模块时，则NodeJS依次尝试以下路径 /home/user/lib/foo/bar /home/lib/foo/bar 包（package）：由多个子模块组成的大模块称做包，并把所有子模块放在同一个目录里。在组成一个包的所有子模块中，需要有一个入口模块，入口模块的导出对象被作为包的导出对象。 123456789101112131415161718要求：cat目录定义一个包-3个子模块，main.js为入口模块# 目录结构：- /home/user/lib/ - cat/ head.js body.js main.js//main.js模块内容：var head = require(&apos;./head&apos;);var body = require(&apos;./body&apos;);exports.create = function (name) &#123; return &#123; name: name, head: head.create(), body: body.create() &#125;;&#125;; 在其他模块使用该包时，需加载包的入口模块：require(‘/home/user/lib/cat/main’)，入口名出现在路径里了，为更像单个模块，隐藏入口名，需解决：i. 当模块的文件名是index.js，加载模块时可以使用模块所在目录的路径代替模块文件路径：ii. 在包目录下包含一个package.json文件，并在其中指定入口模块的路径–自定义入口模块的文件名与存放位置： 1234567891011121314151617181920212223# index.js:var cat = require(&apos;/home/user/lib/cat&apos;);或var cat = require(&apos;/home/user/lib/cat/index&apos;); # cat模块重构如下：- /home/user/lib/ - cat/ + doc/ - lib/ head.js body.js main.js + tests/ package.json#package.json内容：&#123; &quot;name&quot;: &quot;cat&quot;, &quot;main&quot;: &quot;./lib/main.js&quot;&#125;# 使用require(&apos;/home/user/lib/cat&apos;)的方式加载模块。# NodeJS会根据包目录下的package.json找到入口模块所在位置 一个标准的工程目录：示例：编写一个命令行程序 1234567891011- /home/user/workspace/node-echo/ # 工程目录 - bin/ # 存放命令行相关代码 node-echo + doc/ # 存放文档 - lib/ # 存放API相关代码 echo.js - node_modules/ # 存放三方包 + argv/ + tests/ # 存放测试用例 package.json # 元数据文件 README.md # 说明文件 其中部分文件内容如下： 123456789101112131415/* bin/node-echo */var argv = require(&apos;argv&apos;), echo = require(&apos;../lib/echo&apos;);console.log(echo(argv.join(&apos; &apos;)));/* lib/echo.js */module.exports = function (message) &#123; return message;&#125;;/* package.json */&#123; &quot;name&quot;: &quot;node-echo&quot;, &quot;main&quot;: &quot;./lib/echo.js&quot;&#125; 以上例子中分类存放了不同类型的文件，并通过node_moudles目录直接使用三方包名加载模块。此外，定义了package.json之后，node-echo目录也可被当作一个包来使用 参考文档： 7-days-nodejs","categories":[{"name":"NodeJS","slug":"NodeJS","permalink":"http://yoursite.com/categories/NodeJS/"}],"tags":[{"name":"NodeJs","slug":"NodeJs","permalink":"http://yoursite.com/tags/NodeJs/"}]},{"title":"NodeJS01-入门篇","slug":"nodejs/Nodejs01","date":"2014-11-15T11:30:10.000Z","updated":"2016-12-06T05:58:33.032Z","comments":true,"path":"2014/11/15/nodejs/Nodejs01/","link":"","permalink":"http://yoursite.com/2014/11/15/nodejs/Nodejs01/","excerpt":"NodeJs入门：Node.js 历史版本下载地址：https://nodejs.org/dist/注意：Linux上安装Node.js需要安装Python 2.6 或 2.7 ，不建议安装Python 3.0以上版本","text":"NodeJs入门：Node.js 历史版本下载地址：https://nodejs.org/dist/注意：Linux上安装Node.js需要安装Python 2.6 或 2.7 ，不建议安装Python 3.0以上版本 检测PATH环境变量是否配置了Node.js：NPM是随同NodeJS一起安装的包管理工具 打印PATH、 nodejs版本号、 npm版本号：123456$ path C:\\Program Files\\nodejs\\$ node -v$ npm -v$ npm install npm -g #升级npm 交互模式:打开终端，键入node进入命令交互模式：js代码12$ node&gt;console.log(&quot;hello&quot;);//hello Nodejs应用由那几部分组成： 引入require模块 载入Node.js模块 创建服务器 服务器可监听客户端请求 接受请求与响应 req res HTTP服务器:1234567891011121314151617181920212223242526server.js：//载入 http 模块，并将实例化的 HTTP 赋值给变量 httpvar http = require(&quot;http&quot;);//使用 http.createServer() 方法创建服务器，并使用 listen 方法监听(绑定)8888端口http.createServer(function(req, res)&#123; console.log(req.url); //设置头部 res.setHeader(&apos;content-type&apos;, &apos;text/html;charset=utf-8;&apos;); //一直在加载中：请求一直在进行-数据发送之后要立即断掉end res.write(&apos;欢迎访问welcom~&apos;); res.end(&apos;end也可以向前端发生字符的~&apos;);&#125;).listen(8888,function()&#123; console.log(&quot;服务已启动&quot;);&#125;)$node server.js服务已启动Server running at http://127.0.0.1:8888///然后，打开浏览器访问 http://127.0.0.1:8888/，你会看到一个写着 &quot;欢迎访问welcom~end也可以向前端发生字符的~ &quot;的网页 使用npm命令安装模块使用npm安装好的模块都放在工程目录下的node_modules目录中，只需require(&apos;express&apos;)即可引入，无需指定第三方包路径 本地安装 将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录 然后通过 require() 来引入本地安装的包。 全局安装 将安装包放在 /usr/local 下或者你 node 的安装目录 可以直接在命令行里使用。如果你希望具备两者功能，则需要在两个地方安装它或使用 npm link。 12345678910111213$ npm install &lt;Module Name&gt;npm install express #本地安装localnpm install express -g #全局安装globalnpm err! Error: connect ECONNREFUSED 127.0.0.1:8087 #该错误解决办法：$ npm config set proxy null$ npm ls -g #查看所有全局安装的模块$ npm uninstall express #卸载包$ npm ls #查看 /node_modules/ 目录下 包是否还存在$ npm update express #更新模块$ npm search express #搜索模块 创建发布模块package.json 位于模块的目录下，用于定义包的属性。创建模块，package.json文件是必不可少的，可使用NPM生成package.json文件： 1$ npm init #根据自己的情况输入--&gt; yes --&gt; 生成package.json文件 可使用命令行在 npm 资源库中注册用户（使用邮箱注册）： 1234$ npm adduserUsername: cocomaPassword: 111111Email: (this IS public) cocoma@gmail.com 发布模块后，即可使用npm安装 1$ npm publish","categories":[{"name":"NodeJS","slug":"NodeJS","permalink":"http://yoursite.com/categories/NodeJS/"}],"tags":[{"name":"NodeJs","slug":"NodeJs","permalink":"http://yoursite.com/tags/NodeJs/"}]},{"title":"订阅者","slug":"JavaScript设计模式/Observer-Pattern","date":"2014-09-15T11:30:10.000Z","updated":"2016-12-06T06:03:44.699Z","comments":true,"path":"2014/09/15/JavaScript设计模式/Observer-Pattern/","link":"","permalink":"http://yoursite.com/2014/09/15/JavaScript设计模式/Observer-Pattern/","excerpt":"当对象间存在一对多关系时，则使用观察者模式（Observer Pattern），即当一个对象(目标对象)的状态发生改变时，所有依赖于它的对象(观察者对象)都得到通知并被自动更新 观察者模式属于行为型模式","text":"当对象间存在一对多关系时，则使用观察者模式（Observer Pattern），即当一个对象(目标对象)的状态发生改变时，所有依赖于它的对象(观察者对象)都得到通知并被自动更新 观察者模式属于行为型模式 意图：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。 主要解决：‘一个对象状态改变就给其他对象发布通知’ 的问题，而且要考虑到易用和低耦合，保证高度的协作。 何时使用：一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。 如何解决：使用面向对象技术，可以将这种依赖关系弱化。 关键代码：在抽象类里有一个ArrayList 存放观察者们。 优点： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。 缺点： 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。 使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。 注意事项： 1、JAVA 中已经有了对观察者模式的支持类。 2、避免循环引用。 3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。 应用实例： 1、拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。 2、西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。 售楼处与买房者1234567891011121314151617181920212223242526272829303132333435var saleHouse = &#123; //存放订阅者(观察者)- name callBackFn clientMap : new Map(), //订阅信息：谁来订阅-把订阅者都存放到clientMap中 addListener : function (name, callBackFn) &#123; this.clientMap.set(name, callBackFn); &#125;, //发布信息：通知哪位订阅者 trigger : function (name, houseName, housePrice) &#123; //map数据结构是根据索引查询:获取订阅者联系方式 var callBackFn = this.clientMap.get(name); if(!callBackFn)&#123; console.log(&apos;Sorry,&apos; + name + &apos;不是订阅者，请通知(填写)正确的客户~&apos;); &#125; else &#123; callBackFn(name, houseName, housePrice); &#125; &#125; &#125; //订阅 saleHouse.addListener(&apos;素素1&apos;, function (name, houseName, housePrice) &#123; console.log(name +&apos;-1-&apos;+ houseName +&apos;-1-&apos;+ housePrice); &#125;); saleHouse.addListener(&apos;素素2&apos;, function (name, houseName, housePrice) &#123; console.log(name +&apos;-2-&apos;+ houseName +&apos;-2-&apos;+ housePrice); &#125;); //发布 saleHouse.trigger(&apos;素素1&apos;, &apos;听松台&apos;, &apos;10000&apos;); saleHouse.trigger(&apos;素素no&apos;, &apos;听松台&apos;, &apos;10000&apos;);","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"},{"name":"设计模式","slug":"设计模式","permalink":"http://yoursite.com/tags/设计模式/"}]},{"title":"Html5之字符编码集","slug":"Html5/字符集","date":"2014-07-21T11:30:10.000Z","updated":"2016-12-06T06:13:19.622Z","comments":true,"path":"2014/07/21/Html5/字符集/","link":"","permalink":"http://yoursite.com/2014/07/21/Html5/字符集/","excerpt":"html5终极备忘大全","text":"html5终极备忘大全 12345678910 # 为了确保所有新的HTML5元素能以block水平的元素正确地渲染， 雷米夏普(Remy Sharp)创建了一个脚本，通常称为HTML5 shiv&lt;!--[if IE]&gt;&lt;script src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;&lt;![endif]--&gt;# 让各个主流浏览器支持video标签的方法：&lt;script src=&quot;http://html5media.googlecode.com/svn/trunk/src/html5media.min.js&quot;&gt;&lt;/script&gt;&lt;video src=&quot;http://www.zhangxinxu.com/study/media/cat.mp4&quot; width=&quot;352&quot; height=&quot;264&quot; controls autobuffer&gt;&lt;/video&gt; HTML5 localstorage本地存储应用demo HTML特殊字符编码对照表","categories":[{"name":"Html5","slug":"Html5","permalink":"http://yoursite.com/categories/Html5/"}],"tags":[{"name":"Html5","slug":"Html5","permalink":"http://yoursite.com/tags/Html5/"},{"name":"字符编码集","slug":"字符编码集","permalink":"http://yoursite.com/tags/字符编码集/"}]},{"title":"Html5之触摸事件","slug":"Html5/H5之触摸事件","date":"2014-07-19T11:30:10.000Z","updated":"2016-12-06T06:10:37.664Z","comments":true,"path":"2014/07/19/Html5/H5之触摸事件/","link":"","permalink":"http://yoursite.com/2014/07/19/Html5/H5之触摸事件/","excerpt":"HTML5中的触摸事件：touchstart、touchmove、touchend、touchcancel 与PC端事件的差异对比： PC端的mousemove、mouseup、mousedown等事件，在移动端会失效(或使用不正常)，但click事件可以使用，只是会产生300ms的延迟问题","text":"HTML5中的触摸事件：touchstart、touchmove、touchend、touchcancel 与PC端事件的差异对比： PC端的mousemove、mouseup、mousedown等事件，在移动端会失效(或使用不正常)，但click事件可以使用，只是会产生300ms的延迟问题 300ms的延迟问题： click事件在移动手机开发中会存在300ms的延迟问题，因早期手机浏览器有放大或缩小功能，用户在屏幕上点击2次之后，会被触发，因此浏览器做了一个处理，即当触摸一次后，在300ms内若被触摸第二次，则触发放大或缩放功能，否则就是click事件，所以在移动端使用click事件时，会有300ms的迟钝； 在实际应用中，300ms并不是绝对发生的，当用户设置了viewport并禁止缩放时，大部分浏览器会禁止300ms延迟，但在低版本安卓和微信、qq等应用的内嵌webview中仍会发生300ms的延迟问题。 触摸事件的执行顺序：touchstart-touchmove-touchend-click touchstart事件：当手指触摸屏幕时候触发，即使已经有一个手指放在屏幕上也会触发。 touchmove事件：当手指在屏幕上滑动的时候连续地触发。在这个事件发生期间，调用preventDefault()事件可以阻止滚动。 touchend事件：当手指从屏幕上离开的时候触发。 touchcancel事件：当系统停止跟踪触摸的时候触发，即事件被打断的时候触发(来电等) 注：以上事件都会冒泡和取消冒泡，虽然这些触摸事件没有在DOM规范中定义，但是它们却是以兼容DOM的方式实现的，每个触摸事件都有even对象。 touchEvent对象：与PC端事件的差异对比多了3个TouchList属性；每个触摸事件都包括了三个触摸列表，每个列表里包含了对应的一系列触摸点（用来实现多点触控）: touches：当前位于屏幕上的所有手指的一个列表 targetTouches：位于当前DOM元素上的手指(特定于事件目标)列表 changeTouches：保存状态改变手指的列表 每个TouchList中都会有很多Touch对象(触摸点)，通过Touch对象可得到的一些属性如： screenX：触摸目标对于屏幕左边的距离，即x坐标。 screenY：触摸目标对于屏幕上边的距离，即y坐标。 clientX：触摸目标在视口(浏览器)中的x坐标。 clientY：触摸目标在视口中的y坐标。 pageX：触摸目标在页面中的x坐标。 pageY：触摸目标在页面中的y坐标。 target：触摸的当前DOM节点，即动作所针对的目标。 identifier：一个数值，唯一标识触摸会话（touch session）中的当前手指(辨别手指)。一般为从0开始的流水号（android4.1，uc)。 radiusX、radiusY、rotationAngle：手指触摸的范围–有兼容性问题，不常用 注： page包含滚动距离,client不包含滚动距离，screen则以屏幕为基准 事件的touches属性是一个数组，其中一个元素代表同一时刻的一个触控点，从而可以通过touches获取多点触控的每个触控点，在浏览器中测试web端，则只有一点触控，所以直接指向[0] 可为touchstart、touchmove事件加上preventDefault从而阻止触摸时浏览器的缩放、滚动条滚动等 手势事件：即指利用多点触控进行旋转、拉伸等操作，如图片、网页的放大、旋转。需要两个或以上的手指同时触摸时才会触发手势事件。 bug：关于缩放：我们通常使用offsetX、getBoundingClientRect等方法获取元素的位置坐标，但在手机浏览器中页面经常会在使用中被缩放，而用JavaScript输出的元素坐标不变，但元素在屏幕上的响应区域会根据缩放比例产生偏移，以至于，等页面加载完毕后，再放大，会发现，即使手指触摸的是在“touch here”区域外部，也可以控制元素—触摸区域发生了偏移。 解决：刷新页面||恢复缩放 重力感应：为body节点添加onorientationchange事件，即在此事件中由window.orientation属性得到代表当前手机方向的数值，如下： window.orientation的值列表如下： 0：与页面首次加载时的方向一致 -90：相对原始方向顺时针转了90° 180：转了180° 90：逆时针转了90°据我测试，Android2.1尚未支持重力感应。 实例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137// 自定义移动端事件库 ;(function () &#123; var query = function (selector) &#123; return query.fn.init(selector); &#125; query.fn = query.prototype = &#123; //初始化方法 init : function (selector) &#123; if (typeof selector == &apos;string&apos;) &#123; this.element = document.querySelector(selector); return this; &#125; &#125;, //单击事件 tap : function (handler) &#123; //给元素绑定事件 this.element.addEventListener(&apos;touchstart&apos;, touchFn); this.element.addEventListener(&apos;touchend&apos;, touchFn); //声明按下时间和结束时间（用来判断是否是合理的单击操作） var startTime, endTime; //事件触发函数 function touchFn (e) &#123; switch (e.type) &#123; case &apos;touchstart&apos; : //记录按下时间 startTime = new Date().getTime(); break; case &apos;touchend&apos; : //记录结束时间 endTime = new Date().getTime(); if (endTime - startTime &lt;= 400) &#123; //回调 handler(); &#125; break; &#125; &#125; &#125;, //双击 doubleTap : function (handler) &#123; this.element.addEventListener(&apos;touchstart&apos;, touchFn); this.element.addEventListener(&apos;touchend&apos;, touchFn); //记录点击次数 var count = 0; //定时器id var timerId; function touchFn (e) &#123; switch (e.type) &#123; case &apos;touchstart&apos; : count++; //每次按下先清空之前的定时器 clearTimeout(timerId); timerId = setTimeout(function () &#123; //两次按下间隔时间如果超过400ms就 //不算是双击操作,count清零 count = 0; &#125;, 400); break; case &apos;touchend&apos; : if (count == 2) &#123; handler(); //每次执行过后次数要清零 count = 0; clearTimeout(timerId); &#125; break; &#125; &#125; &#125;, //长按 longTap : function (handler) &#123; this.element.addEventListener(&apos;touchstart&apos;, touchFn); this.element.addEventListener(&apos;touchend&apos;, touchFn); this.element.addEventListener(&apos;touchmove&apos;, touchFn); //定时器ID var timerId; function touchFn (e) &#123; switch (e.type) &#123; case &apos;touchstart&apos; : //按下500ms后才算是长按，执行回调函数 timerId = setTimeout(function () &#123; handler(); &#125;, 500); break; case &apos;touchend&apos; : clearTimeout(timerId); break; case &apos;touchmove&apos; : clearTimeout(timerId); break; &#125; &#125; &#125;, //左滑事件 swiperLeft : function (handler) &#123; this.element.addEventListener(&apos;touchstart&apos;, touchFn); this.element.addEventListener(&apos;touchend&apos;, touchFn); //声明坐标变量 var startX, startY, endX, endY; function touchFn (e) &#123; switch (e.type) &#123; case &apos;touchstart&apos; : startX = e.targetTouches[0].pageX; startY = e.targetTouches[0].pageY; break; case &apos;touchend&apos; : endX = e.changedTouches[0].pageX; endY = e.changedTouches[0].pageY; //1、判断是上下滑动还是左右滑动 //2、判断是左还是右 (阈值, 为了有一个容错范围) if (Math.abs(endX - startX) &gt;= Math.abs(endY - startY) &amp;&amp; (startX - endX) &gt;= 40) &#123; handler(); &#125; break; &#125; &#125; &#125; &#125; query.fn.init.prototype = query.fn; window.$ = window.query = query;&#125;)();","categories":[{"name":"Html5","slug":"Html5","permalink":"http://yoursite.com/categories/Html5/"}],"tags":[{"name":"Html5","slug":"Html5","permalink":"http://yoursite.com/tags/Html5/"},{"name":"触摸事件","slug":"触摸事件","permalink":"http://yoursite.com/tags/触摸事件/"}]},{"title":"Html5之audio/video","slug":"Html5/Html5之标签","date":"2014-07-11T11:30:10.000Z","updated":"2016-12-06T06:10:45.425Z","comments":true,"path":"2014/07/11/Html5/Html5之标签/","link":"","permalink":"http://yoursite.com/2014/07/11/Html5/Html5之标签/","excerpt":"HTML5新增了2个与媒体相关的标签video与audio，在网页中可嵌入跨浏览器的音频和视频内容，但不被IE8支持。位于媒体标签开闭之间的任何内容都将作为替补内容，当浏览器不支持这两个媒体元素时显示。","text":"HTML5新增了2个与媒体相关的标签video与audio，在网页中可嵌入跨浏览器的音频和视频内容，但不被IE8支持。位于媒体标签开闭之间的任何内容都将作为替补内容，当浏览器不支持这两个媒体元素时显示。 audio、video基本用法： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950autoplay 自动播放：true音视频加载完毕后立即播放/false(默认)加载完后不立即播放controls 显示控件：true/false(默认)显示/不显示标准的音视频控件loop 循环播放preload 音频在页面加载时进行加载，并预备播放(若使用autoplay,则忽略该属性)src 要播放的音视频的URL:绝对URL/相对URLheight 播放器(video)高度width 播放器(video)宽度loop 循环播放[true/false默认]preload 视频在页面加载时进行加载，并预备播放(若使用autoplay,则忽略该属性)preload=&quot;none&quot;//当页面加载后不载入视频preload=&quot;auto&quot;//当页面加载后载入整个视频preload=&quot;meta&quot;//当页面加载后只载入元数据poster 给视频(video)添加默认显示图片，即规定视频下载时显示的图像，或者在用户点击播放按钮前显示的图像 &lt;audio controls autoplay loop muted src=&quot;song.mp3&quot;&gt; //&lt;source src=&quot;song.mp3&quot; type=&quot;audio/mp3&quot; /&gt; &lt;source src=&quot;song.ogg&quot; type=&quot;audio/ogg&quot;&gt; &lt;source src=&quot;song.ogg&quot; type=&quot;audio/vorbis&quot;&gt; 该浏览器不支持audio标签&lt;/audio&gt;# 可指定多个不同的媒体来源，确保浏览器的支持&lt;video width=&quot;300&quot; height=&quot;200&quot; poster=&quot;test.jpg&quot; controls&gt; &lt;source src=&quot;source/终结者_Larry.MP4&quot; type=&quot;audio/mp4&quot;&gt; &lt;source src=&quot;source/终结者_Larry.webm&quot; type=&quot;video/webm; codecs=&apos;vp8,vorbis&apos;&quot;&gt; &lt;source src=&quot;source/终结者_Larry.ogg&quot; type=&quot;video/ogg; codecs=&apos;theora,vorbis&apos;&quot;&gt; 该浏览器不支持video标签&lt;/video&gt;# 并非所有浏览器均支持audio与video，所以备选内容为：&lt;audio controls=&quot;controls&quot; height=&quot;100&quot; width=&quot;100&quot;&gt; &lt;source src=&quot;song.mp3&quot; type=&quot;audio/mp3&quot; /&gt; &lt;embed height=&quot;100&quot; width=&quot;100&quot; src=&quot;song.mp3&quot; /&gt;&lt;/audio&gt;&lt;video width=&quot;320&quot; height=&quot;240&quot; controls=&quot;controls&quot;&gt; &lt;source src=&quot;movie.mp4&quot; type=&quot;video/mp4&quot; /&gt; &lt;object data=&quot;movie.mp4&quot; width=&quot;320&quot; height=&quot;240&quot;&gt; &lt;embed src=&quot;movie.mp4&quot; width=&quot;320&quot; height=&quot;240&quot; /&gt; &lt;/object&gt;&lt;/video&gt;# 若浏览器不支持，可用flash代替：&lt;video src=&quot;movie.mp4&quot; controls&gt; &lt;object data=&quot;movie.swf&quot; type=&quot;application/x-shockwave-flash&quot;&gt; &lt;param name=&quot;movie&quot; value=&quot;vodeo.swf&quot;/&gt; &lt;/object&gt; 浏览器不支持该视频标签&lt;/video&gt; 两者支持的方法、属性、事件基本相同：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263- 方法：-1:canPlayType()：检测浏览器是否能播放指定的音频或视频类型；返回值： &apos;probable&apos;:浏览器最可能支持该类型&apos;maybe&apos;:浏览器也许支持该类型&apos;&apos;:浏览器不支持该类型console.log(audio.canPlayType(&apos;video/ogg;codecs=&quot;theora,vorbis&quot;&apos;));-2:load()：重新加载音频或视频元素，用于在更改src来源或其他设置后对音频或视频元素进行更新；audio.load();-3:play()开始/pause()停止当前播放的音视频:if (video.paused) &#123; video.play();&#125;else&#123; video.pause();&#125;-4：requestFullscreen()视频需要兼容：webkitRequestFullScreen()mozRequestFullScreen()- 属性：属性：[注意]所有属性中，只有videoWidth和videoHeight是立即可用的，在音视频的元数据加载后，其他属性才可用 ；-------------------------&lt;只读&gt;-1：buffered：获取缓冲时间buffered.length//获取已缓冲范围的数量buffered.start(index)//获取某个已缓冲范围的开始位置buffered.end(index)//获取某个已缓冲范围的结束位置buffered.end(0)//获取当前已缓冲的秒数alert(audio.buffered.end(0));-2：currentSrc：返回当前音频或视频的URLconsole.log(audio.currentSrc);-3：ended(只读)：返回音频或视频是否播放完毕true:播放完毕false:尚未结束console.log(audio.ended);-4：duration：返回当前音频或视频的长度(以秒计)，如果未设置则返回NaNsetTimeout(function()&#123; console.log(audio.duration);&#125;,1000);-5：networkState：返回音频或视频当前网络状态networkState:0(尚未初始化)networkState:1(已选取资源，但并未使用网络)networkState:2(正在下载数据)networkState:3(未找到资源来源)console.log(audio.networkState)-6：paused(只读)：返回音频或视频是否已暂停paused:true;(已暂停)paused:false;(未暂停)console.log(audio.paused);-7：played：已播范围是指音频或视频的时间范围。如果用户在音频或视频中跳跃，会获得多个播放范围 played.length(获得音频或视频已播放范围的数量)played.start(index)(获得某个已播范围的开始位置)played.end(index)(获得某个已播范围的结束位置)[注意]首段已播范围的下标是0console.log(audio.played.end(0));-8：readyState：返回音频或视频的当前就绪状态readyState:0(没有关于音频或视频是否就绪的信息)readyState:1(关于音频或视频就绪的元数据)readyState:2(关于当前播放位置的数据是可用的，但没有足够的数据来播放下一帧)readyState:3(当前及至少下一帧的数据是可用的)readyState:4(可用数据足以开始播放)console.log(audio.readyState);-9：seekable：返回可寻址范围(TimeRanges对象)，可寻址范围是指用户在视频或音频中可寻址(移动播放位置)的时间范围。对于流视频，通常可以寻址到视频中的任何位置，即使其尚未完成缓冲TimeRanges对象的属性：注：第一个可寻址的下标是index 0seekable.length(获得音频或视频中可寻址范围的数量)seekable.start(index)(获得可寻址范围的开始位置)seekable.end(index)(获得可寻址范围的结束位置)console.log(audio.seekable.end(0));-10：seeking：seeking:true(用户正在寻址)seeking:false(用户没有在寻址)console.log(audio.seeking);-------------------------------------&lt;可读写&gt;-0：width(video)/height(video)/poster(video)给视频添加默认显示图片-1：autoplay：autoplay:false(默认，不自动播放)autoplay:true(自动播放)-2：controls：controls:false(默认，不显示控件)controls:true(显示控件)-3：crossOrigin：设置或返回CORS设置-4：currentTime：设置或返回音频或视频的当前位置(以秒计)console.log(audio.currentTime);-5：defaultMuted(只有chrome支持)：设置或返回音/视频是否默认[初始]静音状态：[注意]：该该属性只会改变初始是否静音状态，而不是当前状态，若要改变当前是否静音状态，用muted属性defaultMuted:true(初始静音)defaultMuted:false(默认，初始不静音)audio.defaultMuted = true;-6：muted：当前muted:true(静音)muted:false(不静音)audio.muted = !audio.muted-7：defaultPlaybackRate(只有chrome支持)：设置或返回音/视频的默认播放速度[注意]该属性只改变默认的播放速度，非当前播放速度-playbackRate属性defaultPlaybackRate:1.0(正常速度，默认值)defaultPlaybackRate:0.5(半速)defaultPlaybackRate:2(倍速)defaultPlaybackRate:-1(向后正常速度)defaultPlaybackRate:-0.5(向后半速)playbackRate：当前playbackRate:1(正常速度，默认值)playbackRate:0.5(半速)playbackRate:2(倍速)playbackRate:-1(向后正常速度)playbackRate:-0.5(向后半速)setTimeout(function()&#123; audio.defaultPlaybackRate = 0.5; audio.load(); &#125;,1000);var array = [-1,-0.5,0.5,1,2];var i = 0;var audio = document.getElementById(&apos;audio&apos;);document.onclick = function()&#123; audio.playbackRate = array[i]; console.log(audio.playbackRate); i++; i=i%5;&#125;-8：loop：loop:true(循环播放)loop:false(默认，不循环播放)-9：preload：设置或返回是否在页面加载后立即加载音频或视频preload:auto;(一旦页面加载，则开始加载音频或视频)preload:metadata;(当页面加载后仅加载音频或视频的元数据)preload:none;(页面加载后不加载音频或视频)[注意]当设置autoplay时，该属性无效-10：src：设置或返回音频或视频的当前来源audio.src = &apos;http://7xpdkf.com1.z0.glb.clouddn.com/song.mp3&apos;;-11：volume：设置或返回音频或视频的当前音量volume(取得为0-1，0为静音，1为最大，默认为1)if(audio.volume&lt;=0.9)audio.volume+=0.1;if(audio.volume&gt;=0.1)audio.volume-=0.1;- 事件：--1. 当音频或视频正在加载过程中，会依次发生以下事件：&lt;audio id=&quot;audio&quot; src=&quot;http://7xpdkf.com1.z0.glb.clouddn.com/myocean.mp3&quot; controls&gt;&lt;/audio&gt;&lt;script&gt; //loadstart:提示浏览器开始寻找指定的音频或视频audio.onloadstart = function()&#123; console.log(&apos;loadstart&apos;);&#125;//durationchange:提示音频或视频的时长已改变audio.ondurationchange = function()&#123; console.log(&apos;durationchange&apos;);&#125; //loadedmetadata:提示音频或视频的元数据已加载audio.onloadedmetadata = function()&#123; console.log(&apos;loadedmetadata&apos;);&#125; //loadeddata:提示音频或视频的当前帧已加载，但没有足够数据播放下一帧audio.onloadeddata = function()&#123; console.log(&apos;loadeddata&apos;);&#125; //progress:提示浏览器正在下载指定的音频或视频audio.onprogress = function()&#123; console.log(&apos;progress&apos;);&#125; //canplay:提示浏览器能够开始播放指定的音频或视频audio.oncanplay = function()&#123; console.log(&apos;canplay&apos;);&#125; //canplaythrough:提示音频或视频能够不停顿地一直播放audio.oncanplaythrough = function()&#123; console.log(&apos;canplaythrough&apos;);&#125; &lt;/script&gt;--2. 影响音频或视频数据加载的事件:&lt;video id=&quot;video&quot; src=&quot;http://7xpdkf.com1.z0.glb.clouddn.com/movie.mp4&quot; controls&gt;&lt;/video&gt;&lt;script&gt;setTimeout(function()&#123; video.src=&apos;&apos;;&#125;,2000); //abort:在音频或视频终止加载时触发video.onabort = function()&#123; console.log(&apos;abort&apos;);&#125;//error:在音频或视频加载发生错误时触发video.onerror = function()&#123; console.log(&apos;error&apos;);&#125; //stalled:在浏览器尝试获取媒体数据，但数据不可用时触发video.onstalled = function()&#123; console.log(&apos;stalled&apos;);&#125; //suspend:在音频或视频数据被阻止加载时触发(可以是完成加载后触发，或者因为被暂停)video.onsuspend = function()&#123; console.log(&apos;suspend&apos;);&#125; //empted:在发生故障并且文件突然不可用时触发video.onemptied = function()&#123; console.log(&apos;emptied&apos;);&#125;&lt;/script&gt;--3. 音频或视频控制按钮发生改变时触发:&lt;audio id=&quot;audio&quot; src=&quot;http://7xpdkf.com1.z0.glb.clouddn.com/honey.mp3&quot; controls&gt;&lt;/audio&gt;&lt;script&gt; var i = 1;document.onclick = function()&#123; i+=0.1; audio.playbackRate = i;&#125;//ended:音频或视频文件播放完毕后触发audio.onended = function()&#123; console.log(&apos;ended&apos;);&#125;//pause:音频或视频文件暂停时触发audio.onpause = function()&#123; console.log(&apos;pause&apos;);&#125; //play:音频或视频文件已经就绪可以开始播放时触发audio.onplay = function()&#123; console.log(&apos;play&apos;);&#125; //playing:音频或视频已开始播放时触发audio.onplaying = function()&#123; console.log(&apos;playing&apos;);&#125; //ratechange:播放速度改变进触发audio.onratechange = function()&#123; console.log(&apos;ratechange&apos;);&#125; //seeked:指示定位已结束时触发audio.onseeked = function()&#123; console.log(&apos;seeked&apos;);&#125; //seeking:正在进行指示定位时触发audio.onseeking = function()&#123; console.log(&apos;seeking&apos;);&#125; //timeupdate:播放位置改变时触发[注意:播放和调整指示定位时都会触发]audio.ontimeupdate = function()&#123; console.log(&apos;timeupdate&apos;);&#125; //volumechange:音量改变时触发audio.onvolumechange = function()&#123; console.log(&apos;volumechange&apos;);&#125; //waiting:需要缓冲下一帧而停止时触发audio.onwaiting = function()&#123; console.log(&apos;waiting&apos;);&#125; &lt;/script&gt; 注：元素在一个原生的javascript构造函数Audio，可以在任何时候播放音频。Audio和Image很像，但Audio不用像Image那样必须插入到文档中，只要创建一个新实例，并传入音频源文件即可 12345678var audio = new Audio(&apos;test.mp3&apos;);&lt;script&gt;var audio = new Audio(&apos;http://7xpdkf.com1.z0.glb.clouddn.com/honey.mp3&apos;);audio.oncanplaythrough = function()&#123; audio.controls = true; document.body.appendChild(audio);&#125;&lt;/script&gt;","categories":[{"name":"Html5","slug":"Html5","permalink":"http://yoursite.com/categories/Html5/"}],"tags":[{"name":"Html5","slug":"Html5","permalink":"http://yoursite.com/tags/Html5/"},{"name":"audio/video","slug":"audio-video","permalink":"http://yoursite.com/tags/audio-video/"}]},{"title":"CSS页面重构/优化之absolute/float","slug":"页面重构与优化.html/定位与浮动","date":"2014-05-11T13:30:10.000Z","updated":"2016-12-06T06:07:49.342Z","comments":true,"path":"2014/05/11/页面重构与优化.html/定位与浮动/","link":"","permalink":"http://yoursite.com/2014/05/11/页面重构与优化.html/定位与浮动/","excerpt":"未设定left/top值的absolute元素&lt;–&gt;float元素,具有破坏性，如清除浮动造成的高度塌陷的问题。 注：关于脱离文档流：即将元素从普通的布局排版中拿走，其他盒子在定位的时候，会当做脱离文档流的元素不存在而进行定位。需要注意的是，使用float脱离文档流时，其他盒子会无视这个元素，但其他盒子内的文本依然会为这个元素让出位置，环绕在周围。而对于使用absolute positioning脱离文档流的元素，其他盒子与其他盒子内的文本都会无视它","text":"未设定left/top值的absolute元素&lt;–&gt;float元素,具有破坏性，如清除浮动造成的高度塌陷的问题。 注：关于脱离文档流：即将元素从普通的布局排版中拿走，其他盒子在定位的时候，会当做脱离文档流的元素不存在而进行定位。需要注意的是，使用float脱离文档流时，其他盒子会无视这个元素，但其他盒子内的文本依然会为这个元素让出位置，环绕在周围。而对于使用absolute positioning脱离文档流的元素，其他盒子与其他盒子内的文本都会无视它 无定位值的absolute元素就是个连实际宽度也没有的float浮动元素—无宽度 有定位值的absolute元素可以使用margin定位：无论absolute元素是否设置了left/top值，其margin属性值都是可以起作用的 无定位值的absolute元素是个没有实际宽度的浮动元素：没有设置定位值的absolute元素是个普通又不普通的元素，普通之处在于其依旧在DOM tree中，对margin等属性敏感；不普通在于其实际的高宽都丢失了。这非常类似于浮动(float)，浮动的本质就是“包裹与破坏”，破坏高度，浮动元素的实际占据高度为0；而absolute元素（无定位值）也是“包裹与破坏”，只是其“破坏”比float更加凶猛，不仅实际的高度没有，连实际的宽度也没有 position为absolute的元素如果没有设置left, top值(;)=普通的inline-block属性元素)与设置值为left:0;top:0; (;( 直接从DOM tree里面脱离，独立于文档流，并相对于最近的relative属性的祖先标签定位(若无，则相对于body定位) 的效果不一样： 页面布局要具有较高的重用性和扩展性–“页面重构”，而非“页面切图”：以CSS模块化以及重用性为基本要求，布局需“无宽度”，最大限度的利用标签本身的特性，这样，CSS代码成本又小，又利于日后的扩展与维护：“无宽度”具体指的是没有固定的宽度值（尤其是以px为单位的宽度值，em，rem需看具体情况，%百分值不在其中）；—–可用absolute的绝对定位元素的非绝对定位来实现 文字的阴影效果： IE对CSS3中的text-shadow的支持不佳-兼容处理：123456789#CSS代码：.zxx_show&#123;padding:20px; background:#f0f3f9; color:#aaaaaa; font-size:14px;&#125;.zxx_text&#123;position:absolute; margin:-1px 0 0 -1px; color:#333333;&#125;#HTML代码：&lt;div class=&quot;zxx_show&quot;&gt; &lt;span class=&quot;zxx_text&quot;&gt;这是一段用来测试的文字，看看是否有投影效果~~&lt;/span&gt; 这是一段用来测试的文字，看看是否有投影效果~~&lt;/div&gt; 注：绝对定位元素需要写在投影文字之前，因为absolute元素实际占据的高度宽度都是0，所以文字可以自然而然的在其下方显示，由于下方的文字颜色较浅，于是便形成投影效果。此方法很精妙，可惜有小小兼容性差异，IE6下投影方向是水平朝右，IE7是右上方向，需要hack修复 自适应布局：仿float,宽度固定的头像和描述标签：对描述标签使用margin或padding与头像撑开一段距离，对头像使用无定位值的absolute定位： 123456789101112#css代码：.zxx_show&#123;height:120px; padding:20px; background:#f0f3f9;&#125;.zxx_image&#123;position:absolute;&#125;.zxx_desc&#123;padding-left:100px;&#125;#HTML代码：&lt;div class=&quot;zxx_show&quot;&gt; &lt;a href=&quot;#zxx&quot; class=&quot;zxx_image&quot;&gt; &lt;img src=&quot;http://image.zhangxinxu.com/image/blog/zxx_90_0824.jpg&quot; width=&quot;90&quot; height=&quot;111&quot; /&gt; &lt;/a&gt; &lt;p class=&quot;zxx_desc&quot;&gt;我是男性，我是中国人，我是80后，我现在要讲一大堆的废话用来做效果测试，巴拉巴拉小魔仙。&lt;/p&gt;&lt;/div&gt; 浮动出现的意义其实只是用来让文字环绕图片而已，仅此而已。而我们目前用浮动实现页面布局本不是浮动该干的事情,浮动的本质“包裹与破坏” 浮动的“包裹性”：撇开浮动的“破坏性”，浮动就是个带有方位的display:inline-block属性：display:block; float:left;的CSS代码中“display:block;”是多余的!!! 两者的差异是浮动的方向性，display:inline-block仅仅一个水平排列方向，就是从左往右，而float也可从右往左排列 实现宽度自适应：让按钮的大小自适应于文字的个数，即按钮要自动包裹在文字的外面： 方案一：使用display:inline-block方法 方案二：使用float:left;方法 1234567891011#css代码：.btn1&#123;display:inline-block; background:url(../image/sina_gray_btn.png) no-repeat left top; padding-left:3px; color:#000000; font-size:12px; text-decoration:none;&#125;.btn1 cite&#123;display:block; line-height:26px; padding:0 13px 0 10px; background:url(../image/sina_gray_btn.png) no-repeat right top;&#125;#HTML代码：&lt;a href=&quot;javascript:void(0);&quot; class=&quot;btn1&quot;&gt;&lt;cite&gt;inline-block方法&lt;/cite&gt;&lt;/a&gt;#css代码：.btn2&#123;float:left; background:url(../image/sina_gray_btn.png) no-repeat left top; padding-left:3px; color:#000000; font-size:12px; text-decoration:none;&#125;.btn2 cite&#123;display:block; line-height:26px; padding:0 13px 0 10px; background:url(../image/sina_gray_btn.png) no-repeat right top;&#125;#HTML代码：&lt;a href=&quot;javascript:void(0);&quot; class=&quot;btn1&quot;&gt;&lt;cite&gt;float方法&lt;/cite&gt;&lt;/a&gt; 浮动的“破坏性”：文字之所以会环绕含有float属性的图片,是因为浮动破坏了正常的line boxes 拓展：inline boxes模型：1&lt;p&gt;我是inline box 1 &lt;em&gt;我是em，是inline box&lt;/em&gt; 我是inline box 2 。&lt;/p&gt; 这段HTML代码涉及4种boxes： i. p标签所在的containing box：包含了其他的boxes ii. inline boxes不会让内容成块显示，而是排成一行，如果外部含inline属性的标签(span,a,cite,em等)，则属于inline boxes；如果是个光秃秃的文字，则属于匿名inline boxes，如inline box1/ 2属于匿名inline boxes. 在containing boxes里，一个一个的inline boxes组成了line boxes。这是浮动影响布局的关键box类型 content area 是一种围绕文字看不见的box。content area的大小与font-size大小相关 正常情况下，图片自身就是个inline boxes，line boxes的高度是由其内部最高的inline boxes高度决定的,so 默认状态下，一张图片只能与一行文字对齐。而要想让一张图片与多行文字对齐，只能破坏正常的图片inline boxes模型，为图片添加float:left;使图片从line boxes上脱离出来，跟随自身的方位属性，靠边排列——空壳子/表象。 在目前CSS中，所有的高度都是有两个CSS模型产生的，一个是box盒状模型，对应CSS为”height+padding+margin”[明显的height值和隐藏的height值]，另外一个是line box模型，对应样式为”line-height”[:line box模型真正的高度表现则是由每行众多的inline boxes组成的line boxes（等于内部最高的inline box的高度），而这些line boxes的高度垂直堆叠形成了containing box的高度]。","categories":[{"name":"CSS页面重构","slug":"CSS页面重构","permalink":"http://yoursite.com/categories/CSS页面重构/"}],"tags":[{"name":"absolute","slug":"absolute","permalink":"http://yoursite.com/tags/absolute/"},{"name":"float","slug":"float","permalink":"http://yoursite.com/tags/float/"},{"name":"CSS页面重构","slug":"CSS页面重构","permalink":"http://yoursite.com/tags/CSS页面重构/"}]}]}